/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package editortexto;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.undo.UndoManager;

/**
 *
 * @author 2B
 */
public class Editor extends javax.swing.JFrame {

    String titulo;
    File archivoGuardado;
    private UndoManager undoManager;

    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        Nuevo.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoActionPerformed(evt);
            }
        });
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        GuardarComo.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarComoActionPerformed(evt);
            }
        });
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        AjusteLinea.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
            }
        });
        Deshacer.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
            }
        });
        undoManager = new UndoManager();
        jTextArea1.getDocument().addUndoableEditListener(new UndoableEditListener() {
            public void undoableEditHappened(UndoableEditEvent evt) {
                undoManager.addEdit(evt.getEdit());
            }
        });
    }

    // MÃ©todo para aplicar la fuente al JTextArea
    public void aplicarFuente(Font nuevaFuente) {
        if (nuevaFuente != null) {
            // Aplicar la nueva fuente al JTextArea en la clase Editor
            jTextArea1.setFont(nuevaFuente);
        }
    }

    public JTextArea getJTextArea() {
        return jTextArea1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        Nuevo = new javax.swing.JMenuItem();
        VentanaNueva = new javax.swing.JMenuItem();
        Abrir = new javax.swing.JMenuItem();
        Guardar = new javax.swing.JMenuItem();
        GuardarComo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        ConfigPage = new javax.swing.JMenuItem();
        Imprimir = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        Exit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        Deshacer = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        Copiar = new javax.swing.JMenuItem();
        Cortar = new javax.swing.JMenuItem();
        Pegar = new javax.swing.JMenuItem();
        Eliminar = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        mnuFormat = new javax.swing.JMenu();
        AjusteLinea = new javax.swing.JMenuItem();
        Fuente = new javax.swing.JMenuItem();
        mnuView = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        mnuHelp = new javax.swing.JMenu();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItem24 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        mnuFile.setText("Archivo");

        Nuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Nuevo.setText("Nuevo");
        Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoActionPerformed(evt);
            }
        });
        mnuFile.add(Nuevo);

        VentanaNueva.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        VentanaNueva.setText("Ventana nueva");
        VentanaNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VentanaNuevaActionPerformed(evt);
            }
        });
        mnuFile.add(VentanaNueva);

        Abrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Abrir.setText("Abrir...");
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        mnuFile.add(Abrir);

        Guardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        mnuFile.add(Guardar);

        GuardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        GuardarComo.setText("Guardar como");
        GuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarComoActionPerformed(evt);
            }
        });
        mnuFile.add(GuardarComo);
        mnuFile.add(jSeparator1);

        ConfigPage.setText("Configurar pagina");
        ConfigPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfigPageActionPerformed(evt);
            }
        });
        mnuFile.add(ConfigPage);

        Imprimir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Imprimir.setText("Imprimir...");
        Imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImprimirActionPerformed(evt);
            }
        });
        mnuFile.add(Imprimir);
        mnuFile.add(jSeparator2);

        Exit.setText("Salir");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        mnuFile.add(Exit);

        jMenuBar1.add(mnuFile);

        mnuEdit.setText("Edicion");

        Deshacer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Deshacer.setText("Deshacer");
        Deshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeshacerActionPerformed(evt);
            }
        });
        mnuEdit.add(Deshacer);
        mnuEdit.add(jSeparator3);

        Copiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Copiar.setText("Copiar");
        mnuEdit.add(Copiar);

        Cortar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Cortar.setText("Cortar");
        mnuEdit.add(Cortar);

        Pegar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Pegar.setText("Pegar");
        Pegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PegarActionPerformed(evt);
            }
        });
        mnuEdit.add(Pegar);

        Eliminar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        Eliminar.setText("Eliminar");
        mnuEdit.add(Eliminar);
        mnuEdit.add(jSeparator4);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem14.setText("Busqueda con bing...");
        mnuEdit.add(jMenuItem14);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem15.setText("Buscar");
        mnuEdit.add(jMenuItem15);

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem16.setText("Buscar siguiente");
        mnuEdit.add(jMenuItem16);

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        jMenuItem17.setText("Buscar anterior");
        mnuEdit.add(jMenuItem17);

        jMenuItem18.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem18.setText("Reemplazar");
        mnuEdit.add(jMenuItem18);

        jMenuItem19.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem19.setText("Ir a...");
        mnuEdit.add(jMenuItem19);
        mnuEdit.add(jSeparator5);

        jMenuItem20.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem20.setText("Seleccionar todo");
        mnuEdit.add(jMenuItem20);

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem21.setText("Hora y fecha");
        mnuEdit.add(jMenuItem21);

        jMenuBar1.add(mnuEdit);

        mnuFormat.setText("Formato");

        AjusteLinea.setText("Ajuste de linea");
        AjusteLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjusteLineaActionPerformed(evt);
            }
        });
        mnuFormat.add(AjusteLinea);

        Fuente.setText("Fuente...");
        Fuente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FuenteActionPerformed(evt);
            }
        });
        mnuFormat.add(Fuente);

        jMenuBar1.add(mnuFormat);

        mnuView.setText("Ver");

        jMenuItem4.setText("Zoom");
        mnuView.add(jMenuItem4);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Barra de estado");
        mnuView.add(jCheckBoxMenuItem1);

        jMenuBar1.add(mnuView);

        mnuHelp.setText("Ayuda");

        jMenuItem22.setText("Ver la ayuda");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        mnuHelp.add(jMenuItem22);

        jMenuItem23.setText("Enviar comentarios");
        mnuHelp.add(jMenuItem23);
        mnuHelp.add(jSeparator6);

        jMenuItem24.setText("Acerca del bloc de notas");
        mnuHelp.add(jMenuItem24);

        jMenuBar1.add(mnuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PegarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PegarActionPerformed

    private void NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files", "txt");
        fileChooser.setFileFilter(filter);

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            java.io.File selectedFile = fileChooser.getSelectedFile();

            String filePath = selectedFile.getAbsolutePath();
            jTextArea1.setText(filePath);
        }
    }//GEN-LAST:event_NuevoActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed

        if (archivoGuardado == null) {
            // Si no se ha guardado anteriormente, realiza la acciÃ³n de "Guardar Como"
            GuardarComoActionPerformed(evt);
        } else {
            // Actualiza el contenido en el archivo existente
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(archivoGuardado))) {
                writer.write(jTextArea1.getText());
                JOptionPane.showMessageDialog(this, "Contenido guardado exitosamente.", "Guardado", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_GuardarActionPerformed

    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
        JFileChooser fileChooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de texto", "txt");
        fileChooser.setFileFilter(filter);

        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {

            File selectedFile = fileChooser.getSelectedFile();

            try (BufferedReader reader = new BufferedReader(new FileReader(selectedFile))) {
                StringBuilder contenido = new StringBuilder();
                String linea;
                while ((linea = reader.readLine()) != null) {
                    contenido.append(linea).append("\n");
                }
                jTextArea1.setText(contenido.toString());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_AbrirActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void GuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarComoActionPerformed
        // TODO add your handling code here:
        // Verificar si el Ã¡rea de texto estÃ¡ vacÃ­a antes de intentar guardar
        if (jTextArea1.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El Ã¡rea de texto estÃ¡ vacÃ­a. No hay contenido.", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
            return; // Sale de la funciÃ³n si no hay contenido para guardar
        }

        // Crea un nuevo objeto JFileChooser para permitir al usuario seleccionar la ubicaciÃ³n y el nombre del archivo
        JFileChooser fileChooser = new JFileChooser();

        // Filtra para que solo se puedan seleccionar archivos de texto con extensiÃ³n .txt
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt");
        fileChooser.setFileFilter(filter);

        // Muestra el diÃ¡logo de guardar archivo y espera a que el usuario seleccione una opciÃ³n
        int result = fileChooser.showSaveDialog(this);

        // Verifica si el usuario hizo clic en "Guardar"
        if (result == JFileChooser.APPROVE_OPTION) {
            // Obtiene el archivo seleccionado por el usuario
            File selectedFile = fileChooser.getSelectedFile();

            // Asegura que el archivo tenga la extensiÃ³n .txt
            if (!selectedFile.getName().endsWith(".txt")) {
                selectedFile = new File(selectedFile.getAbsolutePath() + ".txt");
            }

            // Intenta escribir el contenido del Ã¡rea de texto en el archivo seleccionado
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(selectedFile))) {
                writer.write(jTextArea1.getText());

                // Actualiza el tÃ­tulo de la ventana con el nombre del archivo guardado
                archivoGuardado = selectedFile;
                titulo = archivoGuardado.getName();
                setTitle(titulo);

                // Muestra un mensaje de Ã©xito al usuario
                JOptionPane.showMessageDialog(this, "Contenido guardado exitosamente.", "Guardado", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                e.printStackTrace(); // Imprime detalles del error en la consola en caso de un problema al guardar
            }
        }

    }//GEN-LAST:event_GuardarComoActionPerformed

    private void VentanaNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VentanaNuevaActionPerformed
        Editor nuevaVentana = new Editor();
        nuevaVentana.setVisible(true);
    }//GEN-LAST:event_VentanaNuevaActionPerformed

    private void ConfigPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfigPageActionPerformed
        // Obtener la impresora predeterminada
        PrinterJob printerJob = PrinterJob.getPrinterJob();

        // Obtener la configuraciÃ³n actual de la pÃ¡gina
        PageFormat pageFormat = printerJob.pageDialog(printerJob.defaultPage());

        // Puedes acceder a varias propiedades de la pÃ¡gina, como el tamaÃ±o del papel, la orientaciÃ³n y los mÃ¡rgenes
        double width = pageFormat.getWidth();
        double height = pageFormat.getHeight();
        int orientation = pageFormat.getOrientation();
        double marginLeft = pageFormat.getImageableX();
        double marginTop = pageFormat.getImageableY();
    }//GEN-LAST:event_ConfigPageActionPerformed

    private void ImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImprimirActionPerformed
        PrinterJob trabajoImpresion = PrinterJob.getPrinterJob();
        if (trabajoImpresion.printDialog()) {
            try {
                trabajoImpresion.print();
            } catch (PrinterException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_ImprimirActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_ExitActionPerformed

    private void FuenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FuenteActionPerformed
        Fuente ventanaFuente = new Fuente(this); // Pasar la fuente actual como argumento

        // Hacer visible la ventana Fuente
        ventanaFuente.setVisible(true);


    }//GEN-LAST:event_FuenteActionPerformed

    private void AjusteLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjusteLineaActionPerformed
        // ObtÃ©n el estado actual del ajuste de lÃ­nea
        boolean ajusteLineaActivado = jTextArea1.getLineWrap();

        // Invierte el estado
        jTextArea1.setLineWrap(!ajusteLineaActivado);
        jTextArea1.setWrapStyleWord(!ajusteLineaActivado);  // ajustar tambiÃ©n por palabras

        
    }//GEN-LAST:event_AjusteLineaActionPerformed

    private void DeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeshacerActionPerformed
        if (undoManager.canUndo()) {
            undoManager.undo();
        }
    }//GEN-LAST:event_DeshacerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Abrir;
    private javax.swing.JMenuItem AjusteLinea;
    private javax.swing.JMenuItem ConfigPage;
    private javax.swing.JMenuItem Copiar;
    private javax.swing.JMenuItem Cortar;
    private javax.swing.JMenuItem Deshacer;
    private javax.swing.JMenuItem Eliminar;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Fuente;
    private javax.swing.JMenuItem Guardar;
    private javax.swing.JMenuItem GuardarComo;
    private javax.swing.JMenuItem Imprimir;
    private javax.swing.JMenuItem Nuevo;
    private javax.swing.JMenuItem Pegar;
    private javax.swing.JMenuItem VentanaNueva;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuFormat;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenu mnuView;
    // End of variables declaration//GEN-END:variables
}
